/*	
	======================================
	==      CPinti ---> Input/Output    ==
	==                         ecriture ==
	======================================
	
	Developpe entierement par Sebastien FAVIER
	Contributeurs
		Johann GRAF
		Leo VACHET
	
	Description
		Module d'ecriture CPinti Core(tm) pour Cpcdos OSx.
	
	Creation 
		05/02/2015
	
	Reecriture complete 
		No.1 28/06/2015
		No.2 12/02/2016
		No.3 01/04/2016 (C98 --> C++14)
		No.4 18/10/2016 (C++14 --> C++17)
		
	Optimisation/Perfectionnements
		31 Mai 2016
		18 Octobre 2016

	Mise a jour
		02/10/2017
		
		02/10/2017	- Deplacement du code lecture/ecriture dans 2 fichiers separes
		08/05/2017 	- Petites correction et ajout du doevents
		25/01/2017 	- Ajout fonction d'ecriture de fichier 
		13/01/2017	- Fichier existe renvoie un BOOL au lieu d'un int. std::ios::fail etant un BOOL
	
*/
#include <memory>
#include <iostream>
#include "io.h"
#include "CPinti.h" // Doevents
 
namespace gestionnaire_fichier
{
	
	// ===========================================================================
	// ================================ ECRITURE =================================
	// ===========================================================================

	bool cpinti_io::Ecrire_fichier(std::string Chemin, std::string  Donnees, int FLAG)
	{
		// Ecrire dans un fichier
		// FLAG :
		//	1 = Mode binary
		//  2 = Mode appending
		//  3 = Mode binary + appending
		//  Sinon = Mode normal (Ecrase)
		// Retourne :
		//	1 = OK
		//	0 = Probleme
		
		asm("cli");
		
		// Instance de ofstream
		std::ofstream Instance_Fichier;
		
		if(FLAG==1) // Binary
			Instance_Fichier.open(Chemin, std::ofstream::binary);
			
		else if(FLAG==2) // Mode Appending (Concatenation)
			Instance_Fichier.open(Chemin, std::ofstream::app);
		
		else if(FLAG==3) // Mode Appending + Binary
			Instance_Fichier.open(Chemin, std::ofstream::app | std::ofstream::binary);
			
		else
			Instance_Fichier.open(Chemin); // mode normal (Ecrase)
	
		
		// Tester si le fichier est bien ouvert
		if(Instance_Fichier.is_open())
		{
			// On place les nouvelles donnees
			Instance_Fichier << Donnees;
			
			// On ferme le fichier
			Instance_Fichier.close();
			
			// asm("sti");
			
			// OK
			return true;
		} else {
			
			// asm("sti");
			
			// Ah.. Un probleme
			return false;
		}
	}
	
	
}

