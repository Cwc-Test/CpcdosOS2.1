#include "malloc.h"

static struct block *freeList_=(void*)memory_;
static char memory_[memoire_alloue]; // 100 Mo
 
// memory implementation
	void initialize(){
		freeList_->size=memoire_alloue-sizeof(struct block);
		freeList_->free=1;
		freeList_->next=NULL;
	} 
	
	void split(struct block *fitting_slot,size_t size){
 struct block *new_=(void*)((void*)fitting_slot+size+sizeof(struct block));
 new_->size=(fitting_slot->size)-size-sizeof(struct block);
 new_->free=1;
 new_->next=fitting_slot->next;
 fitting_slot->size=size;
 fitting_slot->free=0;
 fitting_slot->next=new_;
}
 

void *MyMalloc(size_t noOfBytes){
 struct block *curr,*prev;
 void *result;

 if(!(freeList_->size)){
  initialize();
  fprintf(stdout, "Memory initialized\n");
 }
 fprintf(stdout, "MyMalloc() --> %d bytes", noOfBytes);
 curr=freeList_;
 while((((curr->size)<noOfBytes)||((curr->free)==0))&&(curr->next!=NULL)){
  prev=curr;
  curr=curr->next;
  fprintf(stdout, "One block checked\n");
 }
 if((curr->size)==noOfBytes){
  curr->free=0;
  result=(void*)(++curr);
  fprintf(stdout, "Exact fitting block allocated\n");
  return result;
 }
 else if((curr->size)>(noOfBytes+sizeof(struct block))){
  split(curr,noOfBytes);
  result=(void*)(++curr);
  fprintf(stdout, "Fitting block allocated with a split\n");
  return result;
 }
 else{
  result=NULL;
  fprintf(stdout, "Sorry. No sufficient memory to allocate\n");
  return result;
 }
}

void merge(){
 struct block *curr,*prev;
 curr=freeList_;
 while((curr->next)!=NULL){
  if((curr->free) && (curr->next->free)){
   curr->size+=(curr->next->size)+sizeof(struct block);
   curr->next=curr->next->next;
  }
  prev=curr;
  curr=curr->next;
 }
}

void MyFree(void* ptr){
	
 fprintf(stdout, "MyFree()");
 
 if(((void*)memory_<=ptr)&&(ptr<=(void*)(memory_+memoire_alloue))){
  struct block* curr=ptr;
  --curr;
  curr->free=1;
  merge();
 }
 else fprintf(stdout, "Please provide a valid pointer allocated by MyMalloc\n");
}